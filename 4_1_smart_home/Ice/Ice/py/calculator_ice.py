# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `calculator.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Demo
_M_Demo = Ice.openModule('Demo')
__name__ = 'Demo'

if 'Color' not in _M_Demo.__dict__:
    _M_Demo.Color = Ice.createTempClass()
    class Color(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    Color.Red = Color("Red", 0)
    Color.Green = Color("Green", 1)
    Color.Blue = Color("Blue", 2)
    Color.White = Color("White", 3)
    Color._enumerators = { 0:Color.Red, 1:Color.Green, 2:Color.Blue, 3:Color.White }

    _M_Demo._t_Color = IcePy.defineEnum('::Demo::Color', Color, (), Color._enumerators)

    _M_Demo.Color = Color
    del Color

if 'InfoKey' not in _M_Demo.__dict__:
    _M_Demo.InfoKey = Ice.createTempClass()
    class InfoKey(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    InfoKey.Temperature = InfoKey("Temperature", 0)
    InfoKey.SmokeLevel = InfoKey("SmokeLevel", 1)
    InfoKey.Location = InfoKey("Location", 2)
    InfoKey.Brightness = InfoKey("Brightness", 3)
    InfoKey.Color = InfoKey("Color", 4)
    InfoKey._enumerators = { 0:InfoKey.Temperature, 1:InfoKey.SmokeLevel, 2:InfoKey.Location, 3:InfoKey.Brightness, 4:InfoKey.Color }

    _M_Demo._t_InfoKey = IcePy.defineEnum('::Demo::InfoKey', InfoKey, (), InfoKey._enumerators)

    _M_Demo.InfoKey = InfoKey
    del InfoKey

if 'Info' not in _M_Demo.__dict__:
    _M_Demo.Info = Ice.createTempClass()
    class Info(Ice.Value):
        def __init__(self, status=0):
            self.status = status

        def ice_id(self):
            return '::Demo::Info'

        @staticmethod
        def ice_staticId():
            return '::Demo::Info'

        def __str__(self):
            return IcePy.stringify(self, _M_Demo._t_Info)

        __repr__ = __str__

    _M_Demo._t_Info = IcePy.defineValue('::Demo::Info', Info, -1, (), False, False, None, (('status', (), IcePy._t_int, False, 0),))
    Info._ice_type = _M_Demo._t_Info

    _M_Demo.Info = Info
    del Info

_M_Demo._t_Device = IcePy.defineValue('::Demo::Device', Ice.Value, -1, (), False, True, None, ())

if 'DevicePrx' not in _M_Demo.__dict__:
    _M_Demo.DevicePrx = Ice.createTempClass()
    class DevicePrx(Ice.ObjectPrx):

        def turnOn(self, context=None):
            return _M_Demo.Device._op_turnOn.invoke(self, ((), context))

        def turnOnAsync(self, context=None):
            return _M_Demo.Device._op_turnOn.invokeAsync(self, ((), context))

        def begin_turnOn(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.Device._op_turnOn.begin(self, ((), _response, _ex, _sent, context))

        def end_turnOn(self, _r):
            return _M_Demo.Device._op_turnOn.end(self, _r)

        def turnOff(self, context=None):
            return _M_Demo.Device._op_turnOff.invoke(self, ((), context))

        def turnOffAsync(self, context=None):
            return _M_Demo.Device._op_turnOff.invokeAsync(self, ((), context))

        def begin_turnOff(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.Device._op_turnOff.begin(self, ((), _response, _ex, _sent, context))

        def end_turnOff(self, _r):
            return _M_Demo.Device._op_turnOff.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Demo.DevicePrx.ice_checkedCast(proxy, '::Demo::Device', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Demo.DevicePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Demo::Device'
    _M_Demo._t_DevicePrx = IcePy.defineProxy('::Demo::Device', DevicePrx)

    _M_Demo.DevicePrx = DevicePrx
    del DevicePrx

    _M_Demo.Device = Ice.createTempClass()
    class Device(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Demo::Device', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Demo::Device'

        @staticmethod
        def ice_staticId():
            return '::Demo::Device'

        def turnOn(self, current=None):
            raise NotImplementedError("servant method 'turnOn' not implemented")

        def turnOff(self, current=None):
            raise NotImplementedError("servant method 'turnOff' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Demo._t_DeviceDisp)

        __repr__ = __str__

    _M_Demo._t_DeviceDisp = IcePy.defineClass('::Demo::Device', Device, (), None, ())
    Device._ice_type = _M_Demo._t_DeviceDisp

    Device._op_turnOn = IcePy.Operation('turnOn', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    Device._op_turnOff = IcePy.Operation('turnOff', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_Demo.Device = Device
    del Device

if 'Printer' not in _M_Demo.__dict__:
    _M_Demo.Printer = Ice.createTempClass()
    class Printer(Ice.Value):
        def __init__(self):
            pass

        def ice_id(self):
            return '::Demo::Printer'

        @staticmethod
        def ice_staticId():
            return '::Demo::Printer'

        def __str__(self):
            return IcePy.stringify(self, _M_Demo._t_Printer)

        __repr__ = __str__

    _M_Demo._t_Printer = IcePy.defineValue('::Demo::Printer', Printer, -1, (), False, False, None, ())
    Printer._ice_type = _M_Demo._t_Printer

    _M_Demo.Printer = Printer
    del Printer

if 'PrinterPrx' not in _M_Demo.__dict__:
    _M_Demo.PrinterPrx = Ice.createTempClass()
    class PrinterPrx(Ice.ObjectPrx):

        def _print(self, message, context=None):
            return _M_Demo.PrinterDisp._op_print.invoke(self, ((message, ), context))

        def printAsync(self, message, context=None):
            return _M_Demo.PrinterDisp._op_print.invokeAsync(self, ((message, ), context))

        def begin_print(self, message, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.PrinterDisp._op_print.begin(self, ((message, ), _response, _ex, _sent, context))

        def end_print(self, _r):
            return _M_Demo.PrinterDisp._op_print.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Demo.PrinterPrx.ice_checkedCast(proxy, '::Demo::Printer', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Demo.PrinterPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Demo::Printer'
    _M_Demo._t_PrinterPrx = IcePy.defineProxy('::Demo::Printer', PrinterPrx)

    _M_Demo.PrinterPrx = PrinterPrx
    del PrinterPrx

    _M_Demo.PrinterDisp = Ice.createTempClass()
    class PrinterDisp(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Demo::Printer', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Demo::Printer'

        @staticmethod
        def ice_staticId():
            return '::Demo::Printer'

        def _print(self, message, current=None):
            raise NotImplementedError("servant method '_print' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Demo._t_PrinterDisp)

        __repr__ = __str__

    _M_Demo._t_PrinterDisp = IcePy.defineClass('::Demo::Printer', PrinterDisp, (), None, ())
    PrinterDisp._ice_type = _M_Demo._t_PrinterDisp

    PrinterDisp._op_print = IcePy.Operation('print', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())

    _M_Demo.PrinterDisp = PrinterDisp
    del PrinterDisp

if '_t_colors' not in _M_Demo.__dict__:
    _M_Demo._t_colors = IcePy.defineSequence('::Demo::colors', (), _M_Demo._t_Color)

if 'ValueOutOfRangeException' not in _M_Demo.__dict__:
    _M_Demo.ValueOutOfRangeException = Ice.createTempClass()
    class ValueOutOfRangeException(Ice.UserException):
        def __init__(self, reason=''):
            self.reason = reason

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Demo::ValueOutOfRangeException'

    _M_Demo._t_ValueOutOfRangeException = IcePy.defineException('::Demo::ValueOutOfRangeException', ValueOutOfRangeException, (), False, None, (('reason', (), IcePy._t_string, False, 0),))
    ValueOutOfRangeException._ice_type = _M_Demo._t_ValueOutOfRangeException

    _M_Demo.ValueOutOfRangeException = ValueOutOfRangeException
    del ValueOutOfRangeException

_M_Demo._t_Bulb = IcePy.defineValue('::Demo::Bulb', Ice.Value, -1, (), False, True, None, ())

if 'BulbPrx' not in _M_Demo.__dict__:
    _M_Demo.BulbPrx = Ice.createTempClass()
    class BulbPrx(_M_Demo.DevicePrx):

        def changeColor(self, color, context=None):
            return _M_Demo.Bulb._op_changeColor.invoke(self, ((color, ), context))

        def changeColorAsync(self, color, context=None):
            return _M_Demo.Bulb._op_changeColor.invokeAsync(self, ((color, ), context))

        def begin_changeColor(self, color, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.Bulb._op_changeColor.begin(self, ((color, ), _response, _ex, _sent, context))

        def end_changeColor(self, _r):
            return _M_Demo.Bulb._op_changeColor.end(self, _r)

        def dim(self, context=None):
            return _M_Demo.Bulb._op_dim.invoke(self, ((), context))

        def dimAsync(self, context=None):
            return _M_Demo.Bulb._op_dim.invokeAsync(self, ((), context))

        def begin_dim(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.Bulb._op_dim.begin(self, ((), _response, _ex, _sent, context))

        def end_dim(self, _r):
            return _M_Demo.Bulb._op_dim.end(self, _r)

        def brighten(self, context=None):
            return _M_Demo.Bulb._op_brighten.invoke(self, ((), context))

        def brightenAsync(self, context=None):
            return _M_Demo.Bulb._op_brighten.invokeAsync(self, ((), context))

        def begin_brighten(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.Bulb._op_brighten.begin(self, ((), _response, _ex, _sent, context))

        def end_brighten(self, _r):
            return _M_Demo.Bulb._op_brighten.end(self, _r)

        def changeBrightness(self, percentagePoints, context=None):
            return _M_Demo.Bulb._op_changeBrightness.invoke(self, ((percentagePoints, ), context))

        def changeBrightnessAsync(self, percentagePoints, context=None):
            return _M_Demo.Bulb._op_changeBrightness.invokeAsync(self, ((percentagePoints, ), context))

        def begin_changeBrightness(self, percentagePoints, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.Bulb._op_changeBrightness.begin(self, ((percentagePoints, ), _response, _ex, _sent, context))

        def end_changeBrightness(self, _r):
            return _M_Demo.Bulb._op_changeBrightness.end(self, _r)

        def getAllPossibleColors(self, context=None):
            return _M_Demo.Bulb._op_getAllPossibleColors.invoke(self, ((), context))

        def getAllPossibleColorsAsync(self, context=None):
            return _M_Demo.Bulb._op_getAllPossibleColors.invokeAsync(self, ((), context))

        def begin_getAllPossibleColors(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.Bulb._op_getAllPossibleColors.begin(self, ((), _response, _ex, _sent, context))

        def end_getAllPossibleColors(self, _r):
            return _M_Demo.Bulb._op_getAllPossibleColors.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Demo.BulbPrx.ice_checkedCast(proxy, '::Demo::Bulb', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Demo.BulbPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Demo::Bulb'
    _M_Demo._t_BulbPrx = IcePy.defineProxy('::Demo::Bulb', BulbPrx)

    _M_Demo.BulbPrx = BulbPrx
    del BulbPrx

    _M_Demo.Bulb = Ice.createTempClass()
    class Bulb(_M_Demo.Device):

        def ice_ids(self, current=None):
            return ('::Demo::Bulb', '::Demo::Device', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Demo::Bulb'

        @staticmethod
        def ice_staticId():
            return '::Demo::Bulb'

        def changeColor(self, color, current=None):
            raise NotImplementedError("servant method 'changeColor' not implemented")

        def dim(self, current=None):
            raise NotImplementedError("servant method 'dim' not implemented")

        def brighten(self, current=None):
            raise NotImplementedError("servant method 'brighten' not implemented")

        def changeBrightness(self, percentagePoints, current=None):
            raise NotImplementedError("servant method 'changeBrightness' not implemented")

        def getAllPossibleColors(self, current=None):
            raise NotImplementedError("servant method 'getAllPossibleColors' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Demo._t_BulbDisp)

        __repr__ = __str__

    _M_Demo._t_BulbDisp = IcePy.defineClass('::Demo::Bulb', Bulb, (), None, (_M_Demo._t_DeviceDisp,))
    Bulb._ice_type = _M_Demo._t_BulbDisp

    Bulb._op_changeColor = IcePy.Operation('changeColor', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Demo._t_Color, False, 0),), (), None, ())
    Bulb._op_dim = IcePy.Operation('dim', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, (_M_Demo._t_ValueOutOfRangeException,))
    Bulb._op_brighten = IcePy.Operation('brighten', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, (_M_Demo._t_ValueOutOfRangeException,))
    Bulb._op_changeBrightness = IcePy.Operation('changeBrightness', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, (_M_Demo._t_ValueOutOfRangeException,))
    Bulb._op_getAllPossibleColors = IcePy.Operation('getAllPossibleColors', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_Demo._t_colors, False, 0), ())

    _M_Demo.Bulb = Bulb
    del Bulb

# End of module Demo
