# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `SmartHome.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module SmartHome
_M_SmartHome = Ice.openModule('SmartHome')
__name__ = 'SmartHome'

if 'Color' not in _M_SmartHome.__dict__:
    _M_SmartHome.Color = Ice.createTempClass()
    class Color(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    Color.Red = Color("Red", 0)
    Color.Green = Color("Green", 1)
    Color.Blue = Color("Blue", 2)
    Color.White = Color("White", 3)
    Color._enumerators = { 0:Color.Red, 1:Color.Green, 2:Color.Blue, 3:Color.White }

    _M_SmartHome._t_Color = IcePy.defineEnum('::SmartHome::Color', Color, (), Color._enumerators)

    _M_SmartHome.Color = Color
    del Color

if '_t_colors' not in _M_SmartHome.__dict__:
    _M_SmartHome._t_colors = IcePy.defineSequence('::SmartHome::colors', (), _M_SmartHome._t_Color)

if 'InfoKey' not in _M_SmartHome.__dict__:
    _M_SmartHome.InfoKey = Ice.createTempClass()
    class InfoKey(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    InfoKey.Location = InfoKey("Location", 0)
    InfoKey.SmokeLevel = InfoKey("SmokeLevel", 1)
    InfoKey.CarbonMonoxideLevel = InfoKey("CarbonMonoxideLevel", 2)
    InfoKey.Volume = InfoKey("Volume", 3)
    InfoKey.Brightness = InfoKey("Brightness", 4)
    InfoKey.Color = InfoKey("Color", 5)
    InfoKey._enumerators = { 0:InfoKey.Location, 1:InfoKey.SmokeLevel, 2:InfoKey.CarbonMonoxideLevel, 3:InfoKey.Volume, 4:InfoKey.Brightness, 5:InfoKey.Color }

    _M_SmartHome._t_InfoKey = IcePy.defineEnum('::SmartHome::InfoKey', InfoKey, (), InfoKey._enumerators)

    _M_SmartHome.InfoKey = InfoKey
    del InfoKey

if '_t_AdvancedInfo' not in _M_SmartHome.__dict__:
    _M_SmartHome._t_AdvancedInfo = IcePy.defineDictionary('::SmartHome::AdvancedInfo', (), _M_SmartHome._t_InfoKey, IcePy._t_string)

if 'Info' not in _M_SmartHome.__dict__:
    _M_SmartHome.Info = Ice.createTempClass()
    class Info(Ice.Value):
        def __init__(self, turnedOn='', details=None):
            self.turnedOn = turnedOn
            self.details = details

        def ice_id(self):
            return '::SmartHome::Info'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Info'

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_Info)

        __repr__ = __str__

    _M_SmartHome._t_Info = IcePy.defineValue('::SmartHome::Info', Info, -1, (), False, False, None, (
        ('turnedOn', (), IcePy._t_string, False, 0),
        ('details', (), _M_SmartHome._t_AdvancedInfo, False, 0)
    ))
    Info._ice_type = _M_SmartHome._t_Info

    _M_SmartHome.Info = Info
    del Info

if 'WrongMethodException' not in _M_SmartHome.__dict__:
    _M_SmartHome.WrongMethodException = Ice.createTempClass()
    class WrongMethodException(Ice.UserException):
        def __init__(self, reason=''):
            self.reason = reason

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHome::WrongMethodException'

    _M_SmartHome._t_WrongMethodException = IcePy.defineException('::SmartHome::WrongMethodException', WrongMethodException, (), False, None, (('reason', (), IcePy._t_string, False, 0),))
    WrongMethodException._ice_type = _M_SmartHome._t_WrongMethodException

    _M_SmartHome.WrongMethodException = WrongMethodException
    del WrongMethodException

_M_SmartHome._t_IDevice = IcePy.defineValue('::SmartHome::IDevice', Ice.Value, -1, (), False, True, None, ())

if 'IDevicePrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.IDevicePrx = Ice.createTempClass()
    class IDevicePrx(Ice.ObjectPrx):

        def turnOn(self, context=None):
            return _M_SmartHome.IDevice._op_turnOn.invoke(self, ((), context))

        def turnOnAsync(self, context=None):
            return _M_SmartHome.IDevice._op_turnOn.invokeAsync(self, ((), context))

        def begin_turnOn(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.IDevice._op_turnOn.begin(self, ((), _response, _ex, _sent, context))

        def end_turnOn(self, _r):
            return _M_SmartHome.IDevice._op_turnOn.end(self, _r)

        def turnOff(self, context=None):
            return _M_SmartHome.IDevice._op_turnOff.invoke(self, ((), context))

        def turnOffAsync(self, context=None):
            return _M_SmartHome.IDevice._op_turnOff.invokeAsync(self, ((), context))

        def begin_turnOff(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.IDevice._op_turnOff.begin(self, ((), _response, _ex, _sent, context))

        def end_turnOff(self, _r):
            return _M_SmartHome.IDevice._op_turnOff.end(self, _r)

        def getInfo(self, context=None):
            return _M_SmartHome.IDevice._op_getInfo.invoke(self, ((), context))

        def getInfoAsync(self, context=None):
            return _M_SmartHome.IDevice._op_getInfo.invokeAsync(self, ((), context))

        def begin_getInfo(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.IDevice._op_getInfo.begin(self, ((), _response, _ex, _sent, context))

        def end_getInfo(self, _r):
            return _M_SmartHome.IDevice._op_getInfo.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.IDevicePrx.ice_checkedCast(proxy, '::SmartHome::IDevice', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.IDevicePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::IDevice'
    _M_SmartHome._t_IDevicePrx = IcePy.defineProxy('::SmartHome::IDevice', IDevicePrx)

    _M_SmartHome.IDevicePrx = IDevicePrx
    del IDevicePrx

    _M_SmartHome.IDevice = Ice.createTempClass()
    class IDevice(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::IDevice')

        def ice_id(self, current=None):
            return '::SmartHome::IDevice'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::IDevice'

        def turnOn(self, current=None):
            raise NotImplementedError("servant method 'turnOn' not implemented")

        def turnOff(self, current=None):
            raise NotImplementedError("servant method 'turnOff' not implemented")

        def getInfo(self, current=None):
            raise NotImplementedError("servant method 'getInfo' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_IDeviceDisp)

        __repr__ = __str__

    _M_SmartHome._t_IDeviceDisp = IcePy.defineClass('::SmartHome::IDevice', IDevice, (), None, ())
    IDevice._ice_type = _M_SmartHome._t_IDeviceDisp

    IDevice._op_turnOn = IcePy.Operation('turnOn', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, (_M_SmartHome._t_WrongMethodException,))
    IDevice._op_turnOff = IcePy.Operation('turnOff', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, (_M_SmartHome._t_WrongMethodException,))
    IDevice._op_getInfo = IcePy.Operation('getInfo', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_SmartHome._t_Info, False, 0), ())

    _M_SmartHome.IDevice = IDevice
    del IDevice

if 'ValueOutOfRangeException' not in _M_SmartHome.__dict__:
    _M_SmartHome.ValueOutOfRangeException = Ice.createTempClass()
    class ValueOutOfRangeException(Ice.UserException):
        def __init__(self, reason=''):
            self.reason = reason

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHome::ValueOutOfRangeException'

    _M_SmartHome._t_ValueOutOfRangeException = IcePy.defineException('::SmartHome::ValueOutOfRangeException', ValueOutOfRangeException, (), False, None, (('reason', (), IcePy._t_string, False, 0),))
    ValueOutOfRangeException._ice_type = _M_SmartHome._t_ValueOutOfRangeException

    _M_SmartHome.ValueOutOfRangeException = ValueOutOfRangeException
    del ValueOutOfRangeException

_M_SmartHome._t_IBulb = IcePy.defineValue('::SmartHome::IBulb', Ice.Value, -1, (), False, True, None, ())

if 'IBulbPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.IBulbPrx = Ice.createTempClass()
    class IBulbPrx(_M_SmartHome.IDevicePrx):

        def changeColor(self, color, context=None):
            return _M_SmartHome.IBulb._op_changeColor.invoke(self, ((color, ), context))

        def changeColorAsync(self, color, context=None):
            return _M_SmartHome.IBulb._op_changeColor.invokeAsync(self, ((color, ), context))

        def begin_changeColor(self, color, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.IBulb._op_changeColor.begin(self, ((color, ), _response, _ex, _sent, context))

        def end_changeColor(self, _r):
            return _M_SmartHome.IBulb._op_changeColor.end(self, _r)

        def darken(self, context=None):
            return _M_SmartHome.IBulb._op_darken.invoke(self, ((), context))

        def darkenAsync(self, context=None):
            return _M_SmartHome.IBulb._op_darken.invokeAsync(self, ((), context))

        def begin_darken(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.IBulb._op_darken.begin(self, ((), _response, _ex, _sent, context))

        def end_darken(self, _r):
            return _M_SmartHome.IBulb._op_darken.end(self, _r)

        def lightUp(self, context=None):
            return _M_SmartHome.IBulb._op_lightUp.invoke(self, ((), context))

        def lightUpAsync(self, context=None):
            return _M_SmartHome.IBulb._op_lightUp.invokeAsync(self, ((), context))

        def begin_lightUp(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.IBulb._op_lightUp.begin(self, ((), _response, _ex, _sent, context))

        def end_lightUp(self, _r):
            return _M_SmartHome.IBulb._op_lightUp.end(self, _r)

        def changeBrightness(self, percentagePoints, context=None):
            return _M_SmartHome.IBulb._op_changeBrightness.invoke(self, ((percentagePoints, ), context))

        def changeBrightnessAsync(self, percentagePoints, context=None):
            return _M_SmartHome.IBulb._op_changeBrightness.invokeAsync(self, ((percentagePoints, ), context))

        def begin_changeBrightness(self, percentagePoints, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.IBulb._op_changeBrightness.begin(self, ((percentagePoints, ), _response, _ex, _sent, context))

        def end_changeBrightness(self, _r):
            return _M_SmartHome.IBulb._op_changeBrightness.end(self, _r)

        def listColors(self, context=None):
            return _M_SmartHome.IBulb._op_listColors.invoke(self, ((), context))

        def listColorsAsync(self, context=None):
            return _M_SmartHome.IBulb._op_listColors.invokeAsync(self, ((), context))

        def begin_listColors(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.IBulb._op_listColors.begin(self, ((), _response, _ex, _sent, context))

        def end_listColors(self, _r):
            return _M_SmartHome.IBulb._op_listColors.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.IBulbPrx.ice_checkedCast(proxy, '::SmartHome::IBulb', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.IBulbPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::IBulb'
    _M_SmartHome._t_IBulbPrx = IcePy.defineProxy('::SmartHome::IBulb', IBulbPrx)

    _M_SmartHome.IBulbPrx = IBulbPrx
    del IBulbPrx

    _M_SmartHome.IBulb = Ice.createTempClass()
    class IBulb(_M_SmartHome.IDevice):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::IBulb', '::SmartHome::IDevice')

        def ice_id(self, current=None):
            return '::SmartHome::IBulb'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::IBulb'

        def changeColor(self, color, current=None):
            raise NotImplementedError("servant method 'changeColor' not implemented")

        def darken(self, current=None):
            raise NotImplementedError("servant method 'darken' not implemented")

        def lightUp(self, current=None):
            raise NotImplementedError("servant method 'lightUp' not implemented")

        def changeBrightness(self, percentagePoints, current=None):
            raise NotImplementedError("servant method 'changeBrightness' not implemented")

        def listColors(self, current=None):
            raise NotImplementedError("servant method 'listColors' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_IBulbDisp)

        __repr__ = __str__

    _M_SmartHome._t_IBulbDisp = IcePy.defineClass('::SmartHome::IBulb', IBulb, (), None, (_M_SmartHome._t_IDeviceDisp,))
    IBulb._ice_type = _M_SmartHome._t_IBulbDisp

    IBulb._op_changeColor = IcePy.Operation('changeColor', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_SmartHome._t_Color, False, 0),), (), None, ())
    IBulb._op_darken = IcePy.Operation('darken', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, (_M_SmartHome._t_ValueOutOfRangeException,))
    IBulb._op_lightUp = IcePy.Operation('lightUp', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, (_M_SmartHome._t_ValueOutOfRangeException,))
    IBulb._op_changeBrightness = IcePy.Operation('changeBrightness', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, (_M_SmartHome._t_ValueOutOfRangeException,))
    IBulb._op_listColors = IcePy.Operation('listColors', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_SmartHome._t_colors, False, 0), ())

    _M_SmartHome.IBulb = IBulb
    del IBulb

if 'TurnOffSafetyExcpetion' not in _M_SmartHome.__dict__:
    _M_SmartHome.TurnOffSafetyExcpetion = Ice.createTempClass()
    class TurnOffSafetyExcpetion(Ice.UserException):
        def __init__(self, reason=''):
            self.reason = reason

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHome::TurnOffSafetyExcpetion'

    _M_SmartHome._t_TurnOffSafetyExcpetion = IcePy.defineException('::SmartHome::TurnOffSafetyExcpetion', TurnOffSafetyExcpetion, (), False, None, (('reason', (), IcePy._t_string, False, 0),))
    TurnOffSafetyExcpetion._ice_type = _M_SmartHome._t_TurnOffSafetyExcpetion

    _M_SmartHome.TurnOffSafetyExcpetion = TurnOffSafetyExcpetion
    del TurnOffSafetyExcpetion

_M_SmartHome._t_IDeviceNonTurnOff = IcePy.defineValue('::SmartHome::IDeviceNonTurnOff', Ice.Value, -1, (), False, True, None, ())

if 'IDeviceNonTurnOffPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.IDeviceNonTurnOffPrx = Ice.createTempClass()
    class IDeviceNonTurnOffPrx(Ice.ObjectPrx):

        def turnOn(self, context=None):
            return _M_SmartHome.IDeviceNonTurnOff._op_turnOn.invoke(self, ((), context))

        def turnOnAsync(self, context=None):
            return _M_SmartHome.IDeviceNonTurnOff._op_turnOn.invokeAsync(self, ((), context))

        def begin_turnOn(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.IDeviceNonTurnOff._op_turnOn.begin(self, ((), _response, _ex, _sent, context))

        def end_turnOn(self, _r):
            return _M_SmartHome.IDeviceNonTurnOff._op_turnOn.end(self, _r)

        def turnOff(self, context=None):
            return _M_SmartHome.IDeviceNonTurnOff._op_turnOff.invoke(self, ((), context))

        def turnOffAsync(self, context=None):
            return _M_SmartHome.IDeviceNonTurnOff._op_turnOff.invokeAsync(self, ((), context))

        def begin_turnOff(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.IDeviceNonTurnOff._op_turnOff.begin(self, ((), _response, _ex, _sent, context))

        def end_turnOff(self, _r):
            return _M_SmartHome.IDeviceNonTurnOff._op_turnOff.end(self, _r)

        def getInfo(self, context=None):
            return _M_SmartHome.IDeviceNonTurnOff._op_getInfo.invoke(self, ((), context))

        def getInfoAsync(self, context=None):
            return _M_SmartHome.IDeviceNonTurnOff._op_getInfo.invokeAsync(self, ((), context))

        def begin_getInfo(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.IDeviceNonTurnOff._op_getInfo.begin(self, ((), _response, _ex, _sent, context))

        def end_getInfo(self, _r):
            return _M_SmartHome.IDeviceNonTurnOff._op_getInfo.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.IDeviceNonTurnOffPrx.ice_checkedCast(proxy, '::SmartHome::IDeviceNonTurnOff', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.IDeviceNonTurnOffPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::IDeviceNonTurnOff'
    _M_SmartHome._t_IDeviceNonTurnOffPrx = IcePy.defineProxy('::SmartHome::IDeviceNonTurnOff', IDeviceNonTurnOffPrx)

    _M_SmartHome.IDeviceNonTurnOffPrx = IDeviceNonTurnOffPrx
    del IDeviceNonTurnOffPrx

    _M_SmartHome.IDeviceNonTurnOff = Ice.createTempClass()
    class IDeviceNonTurnOff(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::IDeviceNonTurnOff')

        def ice_id(self, current=None):
            return '::SmartHome::IDeviceNonTurnOff'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::IDeviceNonTurnOff'

        def turnOn(self, current=None):
            raise NotImplementedError("servant method 'turnOn' not implemented")

        def turnOff(self, current=None):
            raise NotImplementedError("servant method 'turnOff' not implemented")

        def getInfo(self, current=None):
            raise NotImplementedError("servant method 'getInfo' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_IDeviceNonTurnOffDisp)

        __repr__ = __str__

    _M_SmartHome._t_IDeviceNonTurnOffDisp = IcePy.defineClass('::SmartHome::IDeviceNonTurnOff', IDeviceNonTurnOff, (), None, ())
    IDeviceNonTurnOff._ice_type = _M_SmartHome._t_IDeviceNonTurnOffDisp

    IDeviceNonTurnOff._op_turnOn = IcePy.Operation('turnOn', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    IDeviceNonTurnOff._op_turnOff = IcePy.Operation('turnOff', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, (_M_SmartHome._t_TurnOffSafetyExcpetion,))
    IDeviceNonTurnOff._op_getInfo = IcePy.Operation('getInfo', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_SmartHome._t_Info, False, 0), ())

    _M_SmartHome.IDeviceNonTurnOff = IDeviceNonTurnOff
    del IDeviceNonTurnOff

if 'AlarmVolume' not in _M_SmartHome.__dict__:
    _M_SmartHome.AlarmVolume = Ice.createTempClass()
    class AlarmVolume(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    AlarmVolume.High = AlarmVolume("High", 0)
    AlarmVolume.VeryHigh = AlarmVolume("VeryHigh", 1)
    AlarmVolume._enumerators = { 0:AlarmVolume.High, 1:AlarmVolume.VeryHigh }

    _M_SmartHome._t_AlarmVolume = IcePy.defineEnum('::SmartHome::AlarmVolume', AlarmVolume, (), AlarmVolume._enumerators)

    _M_SmartHome.AlarmVolume = AlarmVolume
    del AlarmVolume

_M_SmartHome._t_IDetector = IcePy.defineValue('::SmartHome::IDetector', Ice.Value, -1, (), False, True, None, ())

if 'IDetectorPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.IDetectorPrx = Ice.createTempClass()
    class IDetectorPrx(_M_SmartHome.IDeviceNonTurnOffPrx):

        def alert(self, context=None):
            return _M_SmartHome.IDetector._op_alert.invoke(self, ((), context))

        def alertAsync(self, context=None):
            return _M_SmartHome.IDetector._op_alert.invokeAsync(self, ((), context))

        def begin_alert(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.IDetector._op_alert.begin(self, ((), _response, _ex, _sent, context))

        def end_alert(self, _r):
            return _M_SmartHome.IDetector._op_alert.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.IDetectorPrx.ice_checkedCast(proxy, '::SmartHome::IDetector', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.IDetectorPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::IDetector'
    _M_SmartHome._t_IDetectorPrx = IcePy.defineProxy('::SmartHome::IDetector', IDetectorPrx)

    _M_SmartHome.IDetectorPrx = IDetectorPrx
    del IDetectorPrx

    _M_SmartHome.IDetector = Ice.createTempClass()
    class IDetector(_M_SmartHome.IDeviceNonTurnOff):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::IDetector', '::SmartHome::IDeviceNonTurnOff')

        def ice_id(self, current=None):
            return '::SmartHome::IDetector'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::IDetector'

        def alert(self, current=None):
            raise NotImplementedError("servant method 'alert' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_IDetectorDisp)

        __repr__ = __str__

    _M_SmartHome._t_IDetectorDisp = IcePy.defineClass('::SmartHome::IDetector', IDetector, (), None, (_M_SmartHome._t_IDeviceNonTurnOffDisp,))
    IDetector._ice_type = _M_SmartHome._t_IDetectorDisp

    IDetector._op_alert = IcePy.Operation('alert', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())

    _M_SmartHome.IDetector = IDetector
    del IDetector

# End of module SmartHome
