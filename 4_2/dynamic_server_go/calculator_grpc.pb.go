// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: dynamic_server_go/calculator.proto

package main

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Calculator_AddTwo_FullMethodName      = "/calculator.Calculator/AddTwo"
	Calculator_SubtractTwo_FullMethodName = "/calculator.Calculator/SubtractTwo"
)

// CalculatorClient is the client API for Calculator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalculatorClient interface {
	AddTwo(ctx context.Context, in *ArithmeticOpArguments, opts ...grpc.CallOption) (*SingleIntResult, error)
	SubtractTwo(ctx context.Context, in *ArithmeticOpArguments, opts ...grpc.CallOption) (*SingleIntResult, error)
}

type calculatorClient struct {
	cc grpc.ClientConnInterface
}

func NewCalculatorClient(cc grpc.ClientConnInterface) CalculatorClient {
	return &calculatorClient{cc}
}

func (c *calculatorClient) AddTwo(ctx context.Context, in *ArithmeticOpArguments, opts ...grpc.CallOption) (*SingleIntResult, error) {
	out := new(SingleIntResult)
	err := c.cc.Invoke(ctx, Calculator_AddTwo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculatorClient) SubtractTwo(ctx context.Context, in *ArithmeticOpArguments, opts ...grpc.CallOption) (*SingleIntResult, error) {
	out := new(SingleIntResult)
	err := c.cc.Invoke(ctx, Calculator_SubtractTwo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalculatorServer is the server API for Calculator service.
// All implementations must embed UnimplementedCalculatorServer
// for forward compatibility
type CalculatorServer interface {
	AddTwo(context.Context, *ArithmeticOpArguments) (*SingleIntResult, error)
	SubtractTwo(context.Context, *ArithmeticOpArguments) (*SingleIntResult, error)
	mustEmbedUnimplementedCalculatorServer()
}

// UnimplementedCalculatorServer must be embedded to have forward compatible implementations.
type UnimplementedCalculatorServer struct {
}

func (UnimplementedCalculatorServer) AddTwo(context.Context, *ArithmeticOpArguments) (*SingleIntResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTwo not implemented")
}
func (UnimplementedCalculatorServer) SubtractTwo(context.Context, *ArithmeticOpArguments) (*SingleIntResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubtractTwo not implemented")
}
func (UnimplementedCalculatorServer) mustEmbedUnimplementedCalculatorServer() {}

// UnsafeCalculatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalculatorServer will
// result in compilation errors.
type UnsafeCalculatorServer interface {
	mustEmbedUnimplementedCalculatorServer()
}

func RegisterCalculatorServer(s grpc.ServiceRegistrar, srv CalculatorServer) {
	s.RegisterService(&Calculator_ServiceDesc, srv)
}

func _Calculator_AddTwo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArithmeticOpArguments)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServer).AddTwo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Calculator_AddTwo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServer).AddTwo(ctx, req.(*ArithmeticOpArguments))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calculator_SubtractTwo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArithmeticOpArguments)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServer).SubtractTwo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Calculator_SubtractTwo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServer).SubtractTwo(ctx, req.(*ArithmeticOpArguments))
	}
	return interceptor(ctx, in, info, handler)
}

// Calculator_ServiceDesc is the grpc.ServiceDesc for Calculator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Calculator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "calculator.Calculator",
	HandlerType: (*CalculatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTwo",
			Handler:    _Calculator_AddTwo_Handler,
		},
		{
			MethodName: "SubtractTwo",
			Handler:    _Calculator_SubtractTwo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dynamic_server_go/calculator.proto",
}

const (
	AdvancedCalculator_MultiplyTwo_FullMethodName    = "/calculator.AdvancedCalculator/MultiplyTwo"
	AdvancedCalculator_ListSumComplex_FullMethodName = "/calculator.AdvancedCalculator/ListSumComplex"
	AdvancedCalculator_ListSum_FullMethodName        = "/calculator.AdvancedCalculator/ListSum"
)

// AdvancedCalculatorClient is the client API for AdvancedCalculator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdvancedCalculatorClient interface {
	MultiplyTwo(ctx context.Context, in *ArithmeticOpArguments, opts ...grpc.CallOption) (*SingleIntResult, error)
	ListSumComplex(ctx context.Context, in *ListComplexOpArguments, opts ...grpc.CallOption) (*Complex, error)
	ListSum(ctx context.Context, in *ListArithmeticOpArguments, opts ...grpc.CallOption) (*SingleIntResult, error)
}

type advancedCalculatorClient struct {
	cc grpc.ClientConnInterface
}

func NewAdvancedCalculatorClient(cc grpc.ClientConnInterface) AdvancedCalculatorClient {
	return &advancedCalculatorClient{cc}
}

func (c *advancedCalculatorClient) MultiplyTwo(ctx context.Context, in *ArithmeticOpArguments, opts ...grpc.CallOption) (*SingleIntResult, error) {
	out := new(SingleIntResult)
	err := c.cc.Invoke(ctx, AdvancedCalculator_MultiplyTwo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *advancedCalculatorClient) ListSumComplex(ctx context.Context, in *ListComplexOpArguments, opts ...grpc.CallOption) (*Complex, error) {
	out := new(Complex)
	err := c.cc.Invoke(ctx, AdvancedCalculator_ListSumComplex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *advancedCalculatorClient) ListSum(ctx context.Context, in *ListArithmeticOpArguments, opts ...grpc.CallOption) (*SingleIntResult, error) {
	out := new(SingleIntResult)
	err := c.cc.Invoke(ctx, AdvancedCalculator_ListSum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdvancedCalculatorServer is the server API for AdvancedCalculator service.
// All implementations must embed UnimplementedAdvancedCalculatorServer
// for forward compatibility
type AdvancedCalculatorServer interface {
	MultiplyTwo(context.Context, *ArithmeticOpArguments) (*SingleIntResult, error)
	ListSumComplex(context.Context, *ListComplexOpArguments) (*Complex, error)
	ListSum(context.Context, *ListArithmeticOpArguments) (*SingleIntResult, error)
	mustEmbedUnimplementedAdvancedCalculatorServer()
}

// UnimplementedAdvancedCalculatorServer must be embedded to have forward compatible implementations.
type UnimplementedAdvancedCalculatorServer struct {
}

func (UnimplementedAdvancedCalculatorServer) MultiplyTwo(context.Context, *ArithmeticOpArguments) (*SingleIntResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiplyTwo not implemented")
}
func (UnimplementedAdvancedCalculatorServer) ListSumComplex(context.Context, *ListComplexOpArguments) (*Complex, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSumComplex not implemented")
}
func (UnimplementedAdvancedCalculatorServer) ListSum(context.Context, *ListArithmeticOpArguments) (*SingleIntResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSum not implemented")
}
func (UnimplementedAdvancedCalculatorServer) mustEmbedUnimplementedAdvancedCalculatorServer() {}

// UnsafeAdvancedCalculatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdvancedCalculatorServer will
// result in compilation errors.
type UnsafeAdvancedCalculatorServer interface {
	mustEmbedUnimplementedAdvancedCalculatorServer()
}

func RegisterAdvancedCalculatorServer(s grpc.ServiceRegistrar, srv AdvancedCalculatorServer) {
	s.RegisterService(&AdvancedCalculator_ServiceDesc, srv)
}

func _AdvancedCalculator_MultiplyTwo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArithmeticOpArguments)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdvancedCalculatorServer).MultiplyTwo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdvancedCalculator_MultiplyTwo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdvancedCalculatorServer).MultiplyTwo(ctx, req.(*ArithmeticOpArguments))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdvancedCalculator_ListSumComplex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListComplexOpArguments)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdvancedCalculatorServer).ListSumComplex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdvancedCalculator_ListSumComplex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdvancedCalculatorServer).ListSumComplex(ctx, req.(*ListComplexOpArguments))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdvancedCalculator_ListSum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListArithmeticOpArguments)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdvancedCalculatorServer).ListSum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdvancedCalculator_ListSum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdvancedCalculatorServer).ListSum(ctx, req.(*ListArithmeticOpArguments))
	}
	return interceptor(ctx, in, info, handler)
}

// AdvancedCalculator_ServiceDesc is the grpc.ServiceDesc for AdvancedCalculator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdvancedCalculator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "calculator.AdvancedCalculator",
	HandlerType: (*AdvancedCalculatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MultiplyTwo",
			Handler:    _AdvancedCalculator_MultiplyTwo_Handler,
		},
		{
			MethodName: "ListSumComplex",
			Handler:    _AdvancedCalculator_ListSumComplex_Handler,
		},
		{
			MethodName: "ListSum",
			Handler:    _AdvancedCalculator_ListSum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dynamic_server_go/calculator.proto",
}
